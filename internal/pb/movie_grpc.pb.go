// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/movie.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	SaveMovie(ctx context.Context, in *SaveMovieRequest, opts ...grpc.CallOption) (*Movie, error)
	SaveManyMovies(ctx context.Context, opts ...grpc.CallOption) (MovieService_SaveManyMoviesClient, error)
	UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*Movie, error)
	DeleteMovie(ctx context.Context, in *OnlyIdMovie, opts ...grpc.CallOption) (*OnlyIdMovie, error)
	DeleteManyMovies(ctx context.Context, opts ...grpc.CallOption) (MovieService_DeleteManyMoviesClient, error)
	FindMovieById(ctx context.Context, in *OnlyIdMovie, opts ...grpc.CallOption) (*Movie, error)
	AllMovies(ctx context.Context, in *BlankMovie, opts ...grpc.CallOption) (*Movies, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) SaveMovie(ctx context.Context, in *SaveMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/pb.MovieService/SaveMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) SaveManyMovies(ctx context.Context, opts ...grpc.CallOption) (MovieService_SaveManyMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[0], "/pb.MovieService/SaveManyMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieServiceSaveManyMoviesClient{stream}
	return x, nil
}

type MovieService_SaveManyMoviesClient interface {
	Send(*SaveMovieRequest) error
	Recv() (*Movie, error)
	grpc.ClientStream
}

type movieServiceSaveManyMoviesClient struct {
	grpc.ClientStream
}

func (x *movieServiceSaveManyMoviesClient) Send(m *SaveMovieRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *movieServiceSaveManyMoviesClient) Recv() (*Movie, error) {
	m := new(Movie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/pb.MovieService/UpdateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovie(ctx context.Context, in *OnlyIdMovie, opts ...grpc.CallOption) (*OnlyIdMovie, error) {
	out := new(OnlyIdMovie)
	err := c.cc.Invoke(ctx, "/pb.MovieService/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteManyMovies(ctx context.Context, opts ...grpc.CallOption) (MovieService_DeleteManyMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[1], "/pb.MovieService/DeleteManyMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieServiceDeleteManyMoviesClient{stream}
	return x, nil
}

type MovieService_DeleteManyMoviesClient interface {
	Send(*OnlyIdMovie) error
	CloseAndRecv() (*IdsMovies, error)
	grpc.ClientStream
}

type movieServiceDeleteManyMoviesClient struct {
	grpc.ClientStream
}

func (x *movieServiceDeleteManyMoviesClient) Send(m *OnlyIdMovie) error {
	return x.ClientStream.SendMsg(m)
}

func (x *movieServiceDeleteManyMoviesClient) CloseAndRecv() (*IdsMovies, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(IdsMovies)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieServiceClient) FindMovieById(ctx context.Context, in *OnlyIdMovie, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/pb.MovieService/FindMovieById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) AllMovies(ctx context.Context, in *BlankMovie, opts ...grpc.CallOption) (*Movies, error) {
	out := new(Movies)
	err := c.cc.Invoke(ctx, "/pb.MovieService/AllMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
type MovieServiceServer interface {
	SaveMovie(context.Context, *SaveMovieRequest) (*Movie, error)
	SaveManyMovies(MovieService_SaveManyMoviesServer) error
	UpdateMovie(context.Context, *UpdateMovieRequest) (*Movie, error)
	DeleteMovie(context.Context, *OnlyIdMovie) (*OnlyIdMovie, error)
	DeleteManyMovies(MovieService_DeleteManyMoviesServer) error
	FindMovieById(context.Context, *OnlyIdMovie) (*Movie, error)
	AllMovies(context.Context, *BlankMovie) (*Movies, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) SaveMovie(context.Context, *SaveMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMovie not implemented")
}
func (UnimplementedMovieServiceServer) SaveManyMovies(MovieService_SaveManyMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveManyMovies not implemented")
}
func (UnimplementedMovieServiceServer) UpdateMovie(context.Context, *UpdateMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMovieServiceServer) DeleteMovie(context.Context, *OnlyIdMovie) (*OnlyIdMovie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieServiceServer) DeleteManyMovies(MovieService_DeleteManyMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteManyMovies not implemented")
}
func (UnimplementedMovieServiceServer) FindMovieById(context.Context, *OnlyIdMovie) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMovieById not implemented")
}
func (UnimplementedMovieServiceServer) AllMovies(context.Context, *BlankMovie) (*Movies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllMovies not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_SaveMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).SaveMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/SaveMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).SaveMovie(ctx, req.(*SaveMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_SaveManyMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MovieServiceServer).SaveManyMovies(&movieServiceSaveManyMoviesServer{stream})
}

type MovieService_SaveManyMoviesServer interface {
	Send(*Movie) error
	Recv() (*SaveMovieRequest, error)
	grpc.ServerStream
}

type movieServiceSaveManyMoviesServer struct {
	grpc.ServerStream
}

func (x *movieServiceSaveManyMoviesServer) Send(m *Movie) error {
	return x.ServerStream.SendMsg(m)
}

func (x *movieServiceSaveManyMoviesServer) Recv() (*SaveMovieRequest, error) {
	m := new(SaveMovieRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MovieService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/UpdateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovie(ctx, req.(*UpdateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlyIdMovie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovie(ctx, req.(*OnlyIdMovie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteManyMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MovieServiceServer).DeleteManyMovies(&movieServiceDeleteManyMoviesServer{stream})
}

type MovieService_DeleteManyMoviesServer interface {
	SendAndClose(*IdsMovies) error
	Recv() (*OnlyIdMovie, error)
	grpc.ServerStream
}

type movieServiceDeleteManyMoviesServer struct {
	grpc.ServerStream
}

func (x *movieServiceDeleteManyMoviesServer) SendAndClose(m *IdsMovies) error {
	return x.ServerStream.SendMsg(m)
}

func (x *movieServiceDeleteManyMoviesServer) Recv() (*OnlyIdMovie, error) {
	m := new(OnlyIdMovie)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MovieService_FindMovieById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlyIdMovie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).FindMovieById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/FindMovieById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).FindMovieById(ctx, req.(*OnlyIdMovie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_AllMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankMovie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).AllMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/AllMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).AllMovies(ctx, req.(*BlankMovie))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveMovie",
			Handler:    _MovieService_SaveMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieService_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieService_DeleteMovie_Handler,
		},
		{
			MethodName: "FindMovieById",
			Handler:    _MovieService_FindMovieById_Handler,
		},
		{
			MethodName: "AllMovies",
			Handler:    _MovieService_AllMovies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveManyMovies",
			Handler:       _MovieService_SaveManyMovies_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteManyMovies",
			Handler:       _MovieService_DeleteManyMovies_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/movie.proto",
}
